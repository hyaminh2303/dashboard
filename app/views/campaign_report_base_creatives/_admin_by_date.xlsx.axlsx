wb.add_worksheet(name: t('views.campaign_reports.workbook.by_date.title')) do |sheet|

  sheet.column_widths nil, nil, nil, nil, nil, nil, nil, nil, 10, 10

  r = [ campaign.name]
  r += admin_row_campaign_info(1, campaign)
  sheet.add_row r, style: admin_style_campaign_info(1)
  sheet.merge_cells 'A1:H1' # Campaign Title
  sheet.merge_cells 'N1:O1' # Campaign CPM
  sheet.merge_cells 'P1:Q1' # Campaign total budget

  r = [
      t('views.campaign_details.fields.date'),
      t('views.campaign_details.fields.views'),
      t('views.campaign_details.fields.clicks'),
      t('views.campaign_details.fields.ctr'),
      t('views.campaign_details.fields.actual_spend'),
      t('views.campaign_details.fields.ecpm'),
      t('views.campaign_details.fields.ecpc'),
      t('views.campaign_details.fields.platform')
  ]
  r += admin_row_campaign_info(2, campaign)
  s = [ @head, @head, @head, @head, @head, @head, @head, @head]
  s += admin_style_campaign_info(2)
  sheet.add_row r, style: s

  cell = Reports::Helpers::AdminFormula.new 3
  data.each do |d|
    sheet.add_row [
                      d.date_formatted,
                      cell.sum_for_sub_items(:views, d.data.count),
                      cell.sum_for_sub_items(:clicks, d.data.count),
                      cell.ctr,
                      cell.sum_for_sub_items(:spend, d.data.count),
                      cell.ecpm,
                      cell.ecpc,
                      ''
                  ], style: [ nil, @number, @number, @percent, @money, @money, @money]

    cell.current_row_to_sum_list

    if d.data.any?
      d.data.each do |sub|
        cell.next
        sheet.add_row [
                          '',
                          sub.views,
                          sub.clicks,
                          cell.ctr,
                          sub.spend,
                          cell.ecpm,
                          cell.ecpc,
                          sub.platform
                      ], style: [ @sub, @sub_number, @sub_number, @sub_percent, @sub_money, @sub_money, @sub_money, @sub]
      end
    end

    cell.next
  end

  sheet.add_row [
                    t('views.campaign_details.fields.grand_total'),
                    cell.sum_for_grand(:views),
                    cell.sum_for_grand(:clicks),
                    cell.ctr,
                    cell.sum_for_grand(:spend),
                    cell.ecpm,
                    cell.ecpc,
                    ''
                ], style: [ @head, @head_number, @head_number, @head_percent, @head_money, @head_money, @head_money, @head]

  cell.next

  r = [
      t('views.campaign_reports.workbook.fields.target'),
      campaign.CPM? ? campaign.target : '',
      campaign.CPC? ? campaign.target : ''
  ]
  r += admin_campaign_health_title
  s = [ @title, @number]
  s += admin_campaign_health_style
  sheet.add_row r, style: s

  cell.next

  r = [
      t('views.campaign_reports.workbook.fields.remaining'),
      campaign.CPM? ? cell.minus_target(:views) : '',
      campaign.CPC? ? cell.minus_target(:clicks) : '',
      '', '', '', '', ''
  ]
  r += admin_campaign_health_content campaign
  s = [ @head, @head_number, @head_number, @head_percent, @head_money, @head_money, @head_money, @head]
  s += admin_campaign_health_content_style
  sheet.add_row r, style: s

  # Add hidden rows for create chart
  cell.next
  chart_area_start = cell.row

  cell.chart_from = cell.row
  data.each do |d|
    sheet.add_row [ d.date_formatted, d.views, d.clicks], style: @blank
    cell.next
  end
  cell.chart_to = cell.row

  # Hide row
  # (cell.get_chart_from...cell.get_chart_to).each do |i|
  #   sheet.rows[i - 1].hidden = true
  # end

  # Create chart
  if data.length > 0
      sheet.add_chart(Axlsx::Bar3DChart, :title => 'Views', :start_at => "A#{chart_area_start + 2}", :end_at => "M#{chart_area_start + 17}", :bar_dir => :col, :show_legend => false) do |chart|
        chart.add_series :data => sheet["B#{cell.chart_from}:B#{cell.chart_to - 1}"],
                         :labels => sheet["A#{cell.chart_from}:A#{cell.chart_to - 1}"],
                         :colors => (cell.chart_from...cell.chart_to).map { "4F81BD"}
        chart.valAxis.gridlines = true
        chart.catAxis.gridlines = false
      end

      sheet.add_chart(Axlsx::Bar3DChart, :title => 'Clicks', :start_at => "A#{chart_area_start + 19}", :end_at => "M#{chart_area_start + 34}", :bar_dir => :col, :show_legend => false) do |chart|
        chart.add_series :data => sheet["C#{cell.chart_from}:C#{cell.chart_to - 1}"],
                         :labels => sheet["A#{cell.chart_from}:A#{cell.chart_to - 1}"],
                         :colors => (cell.chart_from...cell.chart_to).map { "4F81BD"}
        chart.valAxis.gridlines = true
        chart.catAxis.gridlines = false
      end
  end
end
